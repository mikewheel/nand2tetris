// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // First zero the inputs according to zx and zy
    Mux16(a=x, b=false, sel=zx, out=x-after-zero);
    Mux16(a=y, b=false, sel=zy, out=y-after-zero);

    // Then negate the inputs according to nx and ny
    Not16(in=x-after-zero, out=x-negated);
    Not16(in=y-after-zero, out=y-negated);
    Mux16(a=x-after-zero, b=x-negated, sel=nx, out=x-after-negation);
    Mux16(a=y-after-zero, b=y-negated, sel=ny, out=y-after-negation);

    // Apply addition or And according to f
    Add16(a=x-after-negation, b=y-after-negation, out=sum-x-y);
    And16(a=x-after-negation, b=y-after-negation, out=and-x-y);
    Mux16(a=and-x-y, b=sum-x-y, sel=f, out=func-output);

    // Negate the output according to no
    Not16(in=func-output, out=neg-func-output);
    Mux16(a=func-output, b=neg-func-output, sel=no, out=out, out[0..7]=out-lsbs, out[8..15]=out-msbs, out[15]=sign-bit);

    // Determine if output is negative by inspecting the first bit
    And(a=sign-bit, b=true, out=ng);

    // Determine if output is zero by taking Nand of each bit compared to all ones
    Or8Way(in=out-lsbs, out=out-8-lsbs-not-zero);
    Or8Way(in=out-msbs, out=out-8-msbs-not-zero);
    Or(a=out-8-lsbs-not-zero, b=out-8-msbs-not-zero, out=any-out-bits-not-zero);
    Not(in=any-out-bits-not-zero, out=zr);

}